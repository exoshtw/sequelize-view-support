[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "\nimport View from './view.js';\nimport decorateSequelize from './sequelizedecorator';\n\nexport {\n    View,\n    decorateSequelize,\n};\n",
    "static": true,
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/queryinterface.js",
    "content": "\n/**\n * Decorator for Sequelize's query interface\n * @param {Sequelize.QueryInterface} queryInterface\n * @return {Sequelize.QueryInterface}\n */\nexport default function decorateQueryInterface(queryInterface) {\n\n    queryInterface.dropView = function(viewName, options = {}) {\n        let sql = `DROP VIEW IF EXISTS ` +\n                    `${this.QueryGenerator.quoteTable(viewName)}`\n        ;\n\n        if (this.sequelize.options.dialect === 'postgres' && options.cascade) {\n            sql += ' CASCADE';\n        }\n\n        return this.sequelize.query(sql);\n    };\n\n    queryInterface.generateQueryFromOptions = function(subQueryOptions) {\n        const {\n            qtableName,\n            qmodel,\n            fieldsMap,\n            qoptions,\n        } = subQueryOptions;\n\n        const afieldMap = Object.keys(fieldsMap || {})\n            .map((k) => [k, fieldsMap[k]])\n        ;\n\n        const query = this.QueryGenerator.selectQuery(\n            qtableName,\n            qoptions,\n            qmodel,\n        )\n            .replace(/;$/, '')\n        ;\n\n        return [query, afieldMap];\n    };\n\n    /**\n     * Create view method\n     * @param {string} viewName\n     * @param {object} attributes\n     * @param {object} subQueryOptions\n     * @param {object} options\n     * @param {Model} model\n     * @return {Promise}\n     */\n    queryInterface.createView = async function(\n        viewName, attributes, subQueryOptions, options, model\n    ) {\n        const attrStr = [];\n        let sql = '';\n\n        attributes = Object.keys(attributes).map((attribute) => this\n            .sequelize\n            .normalizeAttribute(attributes[attribute])\n        );\n\n        // Pick options for exclude defaults, index, etc\n        attributes = attributes.map(({\n            type, Model, fieldName, _modelAttrbute, field,\n        }) => ({type, Model, fieldName, _modelAttrbute, field}));\n\n        // Postgres requires special SQL commands for ENUM/ENUM[]\n        /*\n        if (this.sequelize.options.dialect === 'postgres') {\n            await PostgresQueryInterface\n                .ensureEnums(this, viewName, attributes, options, model);\n        }\n        */\n\n        attributes = this.QueryGenerator.attributesToSQL(\n            attributes, {\n                table: viewName,\n                context: 'createTable',\n            },\n        );\n\n        for (const attr in attributes) {\n            if (!attr.match(/^[a-z0-9]/i)) {\n                continue;\n            }\n\n            const quotedAttr = this.QueryGenerator.quoteIdentifier(attr);\n            const dataType = attributes[attr];\n            const i = attributes[attr].indexOf('COMMENT ');\n\n            if (i !== -1) {\n                attributes[attr] = attributes[attr].substring(0, i);\n            }\n\n            if (this.sequelize.options.dialect === 'postgres') {\n                const dataType = this.QueryGenerator.dataTypeMapping(\n                    viewName,\n                    attr,\n                    attributes[attr]\n                );\n                attrStr.push(`${quotedAttr} ${dataType}`);\n            } else if (this.sequelize.options.dialect === 'sqlite') {\n                attrStr.push(`${quotedAttr} ${dataType}`);\n            }\n        }\n\n        let query = subQueryOptions;\n        let afieldMap = [];\n\n        if (typeof queryOptions !== 'string') {\n            [query, afieldMap] = this.generateQueryFromOptions(subQueryOptions);\n        }\n\n        const selattrs = Object.keys(attributes)\n            .map((field) => afieldMap.find(([f]) => f === field) || [field])\n            .map(([f, t]) => `${this.QueryGenerator.quoteIdentifier(t || f)}` +\n                (t ? ` AS ${this.QueryGenerator.quoteIdentifier(f)}` : ``)\n            )\n            .join(',')\n        ;\n\n        switch (this.sequelize.options.dialect) {\n            case 'sqlite':\n                sql = `CREATE VIEW IF NOT EXISTS ` +\n                    `${this.QueryGenerator.quoteTable(viewName)} AS SELECT ` +\n                    `${selattrs} FROM (${query});`\n                ;\n                break;\n            case 'postgres':\n                sql = `CREATE OR REPLACE VIEW ` +\n                    `${this.QueryGenerator.quoteTable(viewName)} AS SELECT ` +\n                    `${selattrs} FROM (${query}) as sq;`\n                ;\n                break;\n            default:\n                throw new Error(\n                    `View support is not compatilbe with this dialect`\n                );\n        }\n\n        return this.sequelize.query(sql, options);\n    };\n\n    return queryInterface;\n}\n",
    "static": true,
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/src/queryinterface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "decorateQueryInterface",
    "memberof": "src/queryinterface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/queryinterface.js~decorateQueryInterface",
    "access": "public",
    "export": true,
    "importPath": "@exoshtw/sequelize-views-support/src/queryinterface.js",
    "importStyle": "decorateQueryInterface",
    "description": "Decorator for Sequelize's query interface",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Sequelize.QueryInterface"
        ],
        "spread": false,
        "optional": false,
        "name": "queryInterface",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Sequelize.QueryInterface"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/sequelizedecorator.js",
    "content": "\nimport Promise from 'bluebird';\nimport decorateQueryInterface from './queryinterface';\n\n/**\n * Decorate sequelize to support views\n * @param {Class} target\n * @return {Class}\n */\nexport default function(target) {\n\n    return class Decorated extends target {\n\n        /**\n         * @override\n         */\n        getQueryInterface() {\n            super.getQueryInterface();\n\n            if (typeof this.queryInterface.dropView !== 'function') {\n                this.queryInterface = decorateQueryInterface(\n                    this.queryInterface\n                );\n            }\n\n            return this.queryInterface;\n        }\n\n        /**\n         * @override\n         */\n        async sync(options) {\n            await super.sync(options);\n            await this.syncViews(options);\n        }\n\n        /**\n         * Sync views\n         * @param {object} options\n         * @return {Promise}\n         */\n        async syncViews(options) {\n            const views = [];\n\n            this.modelManager.forEachModel((model) => {\n                if (model.isView) {\n                    views.push(model);\n                }\n            });\n\n            const deps = await Promise.map(views, async (view) => [\n                view,\n                await view.resolveSubqueryOptions(options),\n            ])\n                .then((_deps) => {\n                    return _deps.sort(([va, da], [vb, db]) => {\n                        if (db.qoptions.includeNames.includes(va.name)) {\n                            return -1;\n                        } else {\n                            return 1;\n                        }\n                    });\n                })\n            ;\n\n            for (const [model, sqops] of deps) {\n                await model.syncView(options, sqops);\n            }\n        }\n    };\n}\n",
    "static": true,
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/src/sequelizedecorator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "sequelizedecorator",
    "memberof": "src/sequelizedecorator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/sequelizedecorator.js~sequelizedecorator",
    "access": "public",
    "export": true,
    "importPath": "@exoshtw/sequelize-views-support/src/sequelizedecorator.js",
    "importStyle": "sequelizedecorator",
    "description": "Decorate sequelize to support views",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "\n![sv](https://github.com/exoshtw/sequelize-view-support/blob/develop/esdoc/images/logo.png)\n\n# Views support for Sequelize\n\nAdd Views support for [Sequelize](https://sequelize.org/).\n\n> **Warning**: This is a experimental feature, and need peer reviews\n\n## Install 📦\n\n    $ npm install --save @exoshtw/sequelize-view-support\n\nOr yanr:\n\n    $ yarn add @exoshtw/sequelize-view-support\n\n## Documentation 📋\n\n* [Documentation](https://exoshtw.github.io/sequelize-view-support)\n",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@exoshtw/sequelize-views-support\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Add Views support to Sequelize\",\n  \"main\": \"lib/index.js\",\n  \"scripts\": {\n    \"test\": \"npx jest\",\n    \"docs\": \"rm -rf docs/* && npx esdoc -c esdoc/config.js && cp esdoc/favicon.ico docs/favicon.ico\",\n    \"build\": \"rm -rf lib/**; npx babel src --out-dir lib --copy-files\",\n    \"prepare\": \"npm run build && npm run docs\"\n  },\n  \"keywords\": [\n    \"sequelize\",\n    \"view\",\n    \"views\",\n    \"mysql\",\n    \"postgres\",\n    \"sqlite\",\n    \"rds\"\n  ],\n  \"author\": \"exos\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/exoshtw/sequelize-views-support.git\"\n  },\n  \"homepage\": \"https://exoshtw.github.io/sequelize-view-support/\",\n  \"dependencies\": {\n    \"debug\": \"^4.3.3\"\n  },\n  \"peerDependencies\": {\n    \"sequelize\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.17.6\",\n    \"@babel/core\": \"^7.17.5\",\n    \"@babel/eslint-parser\": \"^7.17.0\",\n    \"@babel/node\": \"^7.16.8\",\n    \"@babel/plugin-transform-runtime\": \"^7.17.0\",\n    \"@babel/preset-env\": \"^7.16.11\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^8.10.0\",\n    \"eslint-config-google\": \"^0.14.0\",\n    \"eslint-config-recommended\": \"^4.1.0\",\n    \"eslint-plugin-jest\": \"^26.1.1\",\n    \"husky\": \"^7.0.4\",\n    \"jest\": \"^27.5.1\",\n    \"jest-cli\": \"^27.5.1\",\n    \"lodash\": \"^4.17.21\",\n    \"npm-check-updates\": \"^12.4.0\"\n  },\n  \"engines\": {\n    \"node\": \">=12.22.2\"\n  }\n}\n",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# Views support for Sequelize\n\n<div>\n  <div class=\"center logo\">\n    ![logo](manual/asset/logo.png)\n  </div>\n</div>\n\nAdd Views support for [Sequelize](https://sequelize.org/).\n\nYou are currently looking at the **Tutorials and Guides**. You might also be\ninterested in the [API Reference](identifiers.html).\n\n## Supported dialects\n\n* [Postgres](https://en.wikipedia.org/wiki/PostgreSQL)\n* [SQLite](https://en.wikipedia.org/wiki/SQLite)\n\n## Quick example\n\n```js\nconst { Sequelize, Model, DataTypes } = require('sequelize');\nconst { View, decorateSequelize } = require('@exoshtw/sequelize-views-support');\n\nconst ViewsSupportedSequelize = decorateSequelize(Sequelize);\n\nconst sequelize = new ViewsSupportedSequelize(('sqlite::memory:'));\n\nclass User extends Model {};\n\nUser.init({\n  username: DataTypes.STRING,\n  birthday: DataTypes.DATE,\n  enabled: {type: DataTypes.BOOLEAN, defaultValue: true},\n}, { sequelize, modelName: 'user' });\n\nclass EnabledUser extends View {}; \n\nEnabledUser.init({\n    username: DataTypes.STRING,\n    birthday: DataTypes.DATE,\n}, {\n    sequelize,\n    modelName: 'enabled_user',\n    timestamps: false,\n    viewQueryOptions: {\n        model: User,\n        where: {\n            enabled: true,\n        },\n    },\n});\n\n(async () => {\n  await sequelize.sync();\n\n  const jane = await User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20),\n    enabled: true,\n  });\n\n  const robert = await User.create({\n    username: 'robert',\n    birthday: new Date(1987, 1, 25),\n    enabled: false,\n  });\n\n  const enableds = await EnabledUser.findAll();\n\n  console.log(enableds.map((user) => user.toJSON()));\n})();\n```\n\n## Supporting the project\n\nThis project is limmited to a few dialects, if you implement another dialect\nplease make us a PR.\n",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/manual/index.md",
    "name": "./esdoc/manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/images",
    "name": "./esdoc/images",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/manual/core/started.md",
    "name": "./esdoc/manual/core/started.md",
    "content": "# Install\n\n## Via package manager\n\n    $ npm install --save @exoshtw/sequelize-views-support\n\nOr Yarn\n\n    $ yarn add @exoshtw/sequelize-views-support\n\n## Via Git\n\n    $ git clone https://github.com/exoshtw/sequelize-views-support.git\n    $ cd sequelize-views-support\n    $ npm install\n\n## Use in your project\n\nThis package provide a decorator for `Sequelize` class, you need to use it\ndecorated version of the class instead the original:\n\n```javascript\nimport { Sequelize } from 'sequelize';\nimport { decorateSequelize } from '@exoshtw/sequelize-views-support';\n\nconst ViewSupporterSequelize = decorateSequelize(Sequelize);\n\nconst sequelize = new ViewSupporterSequelize(...);\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/manual/usage/basic.md",
    "name": "./esdoc/manual/usage/basic.md",
    "content": "# Basics\n\nThe views support try to be the more transparent and _squelize-styled_ as\npossible.\n\n## Define new View\n\nTo create a new View, you need to use a familiar syntax, as a normal Model,\nwith the difference that you need to define the _select query_ the view must to\ncreate.\n\nThere are two ways for it; Using an option called `viewQueryOptions` or\noverride a static method called `getQueryOptions`.\n\n### Using config:\n\nThe easy way is pass the query options by init options, ex:\n\n```javascript\nclass EnabledUser extends View {}\n\nEnabledUser.init({\n  username: DataTypes.STRING,\n  enabled: DataTypes.BOOLEAN,\n}, {\n  sequelize,\n  timestamps: false,\n  viewQueryOptions: {\n    model: User,\n    attributes: ['id', 'username'],\n    where: {\n      enabled: true,\n    },\n  },\n});\n```\n\nUsing it we are creating a view using info from model User, using a similar\nsyntax to do a `findAll`. \n\n### Overriding `getQueryOptions`\n\nThe other way is overriding the static method `getQueryOptions`, this gets as\nfirst param the options of the View (as a model):\n\n```javascript\nclass EnabledUser extends View {\n  static getQueryOptions(options) {\n    return {\n      model: User,\n      attributes: ['id', 'username'],\n      where: {\n        enabled: true,\n      },\n    };\n  }\n}\n\nEnabledUser.init({\n  username: DataTypes.STRING,\n  enabled: DataTypes.BOOLEAN,\n}, {\n  sequelize,\n  timestamps: false,\n});\n```\n\n### Using both\n\nYou can to override the method using the previous `viewQueryOptions` option,\nex:\n\n```javascript\nclass EnabledUser extends View {\n  static getQueryOptions(options) {\n    return {\n      model: User,\n      attributes: ['id', 'username'],\n      ...options.viewQueryOptions,\n    };\n  }\n}\n\nEnabledUser.init({\n  username: DataTypes.STRING,\n  enabled: DataTypes.BOOLEAN,\n}, {\n  sequelize,\n  timestamps: false,\n  viewQueryOptions: {\n    where: { enabled: true },\n  },\n});\n```\n\n## Usage\n\nThe usage of a defined view is totally similar to use a standar model, using\nthe View defined below, we can do:\n\n```javascript\nconst result = await EnabledUser.findAll();\nconsole.log(result.map((user) => user.toJSON()));\n```\n\nThe query options are applicable over the View, for example:\n\n```javascript\nconst result = await EnabledUser.findAll({\n  attributes: ['username'],\n  order: [\n    ['username', 'DESC'],\n  ],\n});\n```\n\nAll the supported methods by `Sequelize.Model` are supported, like `findOne`,\n`count`, etc.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/manual/usage/associations.md",
    "name": "./esdoc/manual/usage/associations.md",
    "content": "# Using with associations\n\nThe `viewQueryOptions` options support the most features of a sequelize query\noptions, including `include`, the only extra-step we need to do, is indicate to\nthe view, where are the information of the included fields.\n\nFor this proppose, there are an option param called `fieldsMap`, this should to\nbe a dictionary like object using the view field as key, and the query field as\nvalue.\n\n## Example: \n\n```javascript\n// Create User Model\nclass User extends Model {};\n\nUser.init({\n  username: DataTypes.STRING,\n  birthday: DataTypes.DATE,\n}, { sequelize, modelName: 'user' });\n\n// Create Post Model\nclass Post extends Model {};\n\nPost.init({\n  title: DataTypes.STRING,\n  content: DataTypes.TEXT,\n}, { sequelize, modelName: 'post' });\n\n// Create Post -> User sssociation\nPost.belongsTo(User, {allowNull: false});\n\n// Create View\nclass PublicPost extends View {}; \n\nPublicPost.init({\n  title: DataTypes.STRING,\n  author: DataTypes.STRING,\n  createdAt: DataTypes.DATE,\n}, {\n    sequelize,\n    modelName: 'public_posts',\n    timestamps: false,\n    viewQueryOptions: {\n        model: Post, \n        attributes: ['id', 'title', 'createdAt'],\n        include: [{\n            model: User,\n            required: true,\n            attributes: ['username'],\n        }],\n        // Map user.username to author\n        fieldsMap: {\n            author: 'user.username',\n        },\n    },\n});\n\n(async () => {\n  await sequelize.sync();\n\n  const jane = await User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20),\n  });\n\n  const robert = await User.create({\n    username: 'robert',\n    birthday: new Date(1987, 1, 25),\n  });\n\n  const post1 = await Post.create({\n    title: 'Post 1',\n    content: 'This is the first post',\n    userId: jane.id,\n  });\n\n  const post2 = await Post.create({\n    title: 'Post 2',\n    content: 'This is the second post',\n    userId: robert.id,\n  });\n\n  const result = await PublicPost.findAll();\n\n  console.log(result.map((post) => post.toJSON()));\n})();\n```\n\nthis example should to return:\n\n```javascript\n[\n  {\n    id: 1,\n    title: 'Post 1',\n    author: 'janedoe',\n    createdAt: 2022-03-01T01:05:53.411Z\n  },\n  {\n    id: 2,\n    title: 'Post 2',\n    author: 'robert',\n    createdAt: 2022-03-01T01:05:53.414Z\n  }\n]\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/manual/usage/aggregations.md",
    "name": "./esdoc/manual/usage/aggregations.md",
    "content": "# Using with aggregations fields\n\nViews support make easy to work with aggregations fields, beig abble to use it\nas standar fields because this are going to be proccesed by the db engine.\n\nUsing the option param `fieldsMap`, you can to map a View field to an\naggregation function.\n\n## Example using count\n\n```javascript\n// Create User Model\nclass User extends Model {};\n\nUser.init({\n  username: DataTypes.STRING,\n  birthday: DataTypes.DATE,\n}, { sequelize, modelName: 'user' });\n\n// Create Post Model\n\nclass Post extends Model {};\n\nPost.init({\n  title: DataTypes.STRING,\n  content: DataTypes.TEXT,\n}, { sequelize, modelName: 'post' });\n\n// Create Post -> User sssociation\nPost.belongsTo(User, {allowNull: false});\nUser.hasMany(Post);\n\n// Create View\nclass UserPosts extends View {}; \n\nUserPosts.init({\n    username: DataTypes.STRING,\n    posts: DataTypes.INTEGER,\n}, {\n    sequelize,\n    modelName: 'user_posts',\n    timestamps: false,\n    viewQueryOptions: {\n        model: User, \n        attributes: [\n            'id',\n            'username',\n            [fn('count', 'post.id'), 'posts']\n        ],\n        group: ['user.id'],\n        include: [{\n            model: Post,\n            attributes: [],\n        }],\n    },\n});\n\n(async () => {\n  await sequelize.sync();\n\n  const jane = await User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20),\n  });\n\n  const robert = await User.create({\n    username: 'robert',\n    birthday: new Date(1987, 1, 25),\n  });\n\n  const post1 = await Post.create({\n    title: 'Post 1',\n    content: 'This is the first post',\n    userId: jane.id,\n  });\n\n  const post2 = await Post.create({\n    title: 'Post 2',\n    content: 'This is the second post',\n    userId: robert.id,\n  });\n\n  const post3 = await Post.create({\n    title: 'Post 3',\n    content: 'This is the third post',\n    userId: robert.id,\n  });\n\n  const result = await UserPosts.findAll();\n\n  console.log(result.map((user) => user.toJSON()));\n})();\n```\n\nThis should to write out:\n\n```javascript\n[\n  { id: 1, username: 'janedoe', posts: 1 },\n  { id: 2, username: 'robert', posts: 2 }\n]\n```\n\n## Using where/group/order with aggregated fields\n\nThe aesy way to make complex operations with aggregators is becouse you treat\nthis like standar fields, being abble to do for ex:\n\n```javascript\nconst result = UserPost.findAll({\n    attributes: ['username', 'posts'],\n    where: {\n      posts: {\n        [Op.gte]: 10,\n      },\n    },\n    order: [\n      ['posts', 'DESC'],\n    ],\n});\n```\n\nIn this case, we are filtering and ordering using the final count of posts, in\na squelize simple query, this is very complex becaouse we need to group and\ndefine aggregators in the query. Using views, there are simplest.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/manual/usage/virtuals.md",
    "name": "./esdoc/manual/usage/virtuals.md",
    "content": "# Using Views instead of virtual fields\n\nAnother usage for the Views impplementation must to be the use of pre-calculate\nor aggregated values instead of virtual fields, for querying implementation and\nperformance.\n\nIn the sequelize style, we need to create a virtual field and define the `get`\nproperty to _for example_ do a concat.\n\nUsing views we are abble to use these fields for querying, filter, order, etc.\n\n## Example\n\n```javascript\nclass User extends Model {};\n\nUser.init({\n  name: DataTypes.STRING,\n  lastname: DataTypes.STRING,\n}, { sequelize, modelName: 'user' });\n\nclass FullNameUser extends View {}; \n\nFullNameUser.init({\n    fullname: DataTypes.STRING,\n}, {\n    sequelize,\n    modelName: 'fullname_user',\n    timestamps: false,\n    viewQueryOptions: {\n        model: User,\n        attributes: [\n            'id',\n            // Use fn('concat', ...) in postgres\n            [literal(`name || ' ' || lastname `), 'fullname']\n        ],\n    },\n});\n\n(async () => {\n  await sequelize.sync();\n\n  const jane = await User.create({\n    name: 'Jane',\n    lastname: 'Doe',\n  });\n\n  const robert = await User.create({\n    name: 'Robert',\n    lastname: 'Jhonson',\n  });\n\n  const enableds = await FullNameUser.findAll();\n\n  console.log(enableds.map((user) => user.toJSON()));\n})();\n```\n\nThis should to output:\n\n```javascript\n[\n  { id: 1, fullname: 'Jane Doe' },\n  { id: 2, fullname: 'Robert Jhonson' }\n]\n```\n\nObviuoly, we are limmited to use logic from the dialect and not in Javscript,\nbut with the adventage to use it in queries, for ex:\n\n```javascript\nconst result = await FullNameUser.findAll({\n  where: {\n    fullname: {\n      [Op.like]: 'J% D%',\n    },\n  },\n});\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/manual/usage/combine.md",
    "name": "./esdoc/manual/usage/combine.md",
    "content": "# Combine concepts\n\nIf you read the previous examples, you are aware the power of Views, in this\nexample, we are going to combine some concepts like associations and\naggregations to make something more complex, in this case we are going to\ncreate a View thats resolve a User balance.\n\nIn this example with have two models:\n\n* **User**: The users model getting info from simple users\n* **Pay**: Pays to user, each register add an amount to a user\n\n## Example\n\n```javascript\n// Create User Model\nclass User extends Model {};\n\nUser.init({\n  username: DataTypes.STRING,\n  birthday: DataTypes.DATE,\n}, { sequelize, modelName: 'user' });\n\n// Create Pays Model \n\nclass Pay extends Model {};\n\nPay.init({\n  amount: DataTypes.DECIMAL(),\n  observation: DataTypes.STRING,\n}, { sequelize, modelName: 'pay' });\n\n// Create Pay -> User sssociation\nPay.belongsTo(User, {allowNull: false});\nUser.hasMany(Pay);\n\n// Create View\nclass UserBalance extends View {}; \n\nUserBalance.init({\n    username: DataTypes.STRING,\n    amount: DataTypes.DECIMAL,\n}, {\n    sequelize,\n    modelName: 'user_balance',\n    timestamps: false,\n    viewQueryOptions: {\n        model: User, \n        attributes: [\n            'id',\n            'username',\n            [fn('coalesce', fn('sum', col('pays.amount')), 0), 'amount']\n        ],\n        group: ['user.id'],\n        include: [{\n            model: Pay,\n            required: false,\n        }],\n    },\n});\n\n(async () => {\n  await sequelize.sync();\n\n  const jane = await User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20),\n  });\n\n  const robert = await User.create({\n    username: 'robert',\n    birthday: new Date(1987, 1, 25),\n  });\n\n  await Pay.create({\n    amount: 100,\n    observation: 'Salary',\n    userId: jane.id,\n  });\n\n  await Pay.create({\n    amount: 50,\n    observation: 'Gift',\n    userId: jane.id,\n  });\n\n  await Pay.create({\n    amount: 0.57,\n    observation: 'Interest',\n    userId: jane.id,\n  });\n\n    const result = await UserBalance.findAll({\n        // Use aggreation functions in order like a sr.\n        order: [['amount', 'ASC']],\n    });\n\n  console.log(result.map((user) => user.toJSON()));\n})();\n```\n\nThe output should to be:\n\n```javascript\n[\n  { id: 2, username: 'robert', amount: 0 },\n  { id: 1, username: 'janedoe', amount: 150.57 }\n] \n```\n\n## Explanation\n\nIn this case we use an association with `Pay` model, and an aggregation\nfunction to `sum` the amounts, getting a reduced balance from user, in this\ncase don't map fields becouse the `amount` field is declared in the main Model,\nthis View can be used for obtain single registers without use aggregations:\n\n```javascript\nconst janedoeBalance = await UserBalance.findOne({\n  attributes: ['amount'],\n  where: {id: 1},\n  raw: true,\n})\n  .then((result) => result.amount)\n;\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/exos/alpha/flixxo/sequelize-view-support/esdoc/manual/usage/polymorphism.md",
    "name": "./esdoc/manual/usage/polymorphism.md",
    "content": "# Polymorphism using Views\n\nOne of pilars of the object oriented programming is the polymorphism, but this\nparadigm is very hard to apply in relational databases, and this complexity is\nincreased in the ORM layer.\n\nSequelie [have an\nexample](https://sequelize.org/v6/manual/polymorphic-associations.html) using\nthe `beforeFind` hook and scopes.\n\nThere we explore an alternative using Views, with the adventage of the\ntransparent usage in queries.\n\n## Stage\n\nIn this stage with have and entity called `Vehicle`, with a serie of common\nvehicles attributes, as the price or the name, and a attribute called `type`\nthat define who type of _vehicle_ is, the rest of properties are in two\nseparate models: `Car` and `Bike`, this referers to the `Vehicle` model with an\none to one relation.\n\n## Propouse\n\nWe propose to create two abstract class, `VehicleChild` extending of `Model`,\nand `VehicleChildView` extending of `View`.\n\n\n## Implement\n\n### Create parent model\n\nFirst, we are going the Parent entity model:\n\n```javascript\n// Create Vehicle Model\nclass Vehicle extends Model {};\n\nVehicle.init({\n  type: DataTypes.ENUM('car', 'bike'),\n  name: DataTypes.STRING,\n  price: DataTypes.DECIMAL,\n}, { sequelize, modelName: 'vehicle' });\n```\n\nThis has the type of vehicle and the common information.\n\n### Create child abstract\n\nNext, we are going to code a abstract class for use by the childs of `Vehicle`:\n\n```javascript \n// Create Child Model Abstract\nclass VehicleChildren extends Model {\n  // Override init for add id field\n  static init(fields, options = {}) {\n    super.init({\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: false,\n      },\n      ...fields,\n    }, {\n      timestamps: false,\n      ...options,\n    });\n  }\n\n  static associate(models) {\n    Vehicle.hasOne(this, {\n        foreignKey: 'id',\n        sourceKey: 'id',\n        constraints: true,\n    });\n  }\n};\n```\n\nIn this case, we are overriding the method `init`, to add an id field, in this\ncase, it's neccesary the child id was the same of the parent model, for this\nreason set `autoIncrement` in false.\n\nBy other hand, set `timestamps` in false becouse the creation time is in the\nparent model. By practical propouses we will not to worry for the `updatedAt`\nfield.\n\nIn the associate method, we are associating own child model with the parent.\n\n### Create child models\n\n```javascript\n// Create Car Model\nclass Car extends VehicleChildren {};\n\nCar.init({\n    transmission: DataTypes.ENUM('automatic', 'manual'),\n    doors: DataTypes.INTEGER,\n    style: DataTypes.ENUM('sedan', 'coupe', 'convertible'),\n    hp: DataTypes.INTEGER,\n}, { sequelize, modelName: 'car'});\n\n// Create Bike Model\nclass Bike extends VehicleChildren {};\n\nBike.init({\n    style: DataTypes.ENUM('road', 'mountain', 'hybrid'),\n    cicles: DataTypes.INTEGER,\n    cc: DataTypes.INTEGER,\n}, { sequelize, modelName: 'bike'});\n\n// Create associations \nCar.associate();\nBike.associate();\n```\n\nWe extends the `VehicleChildren` and define a serie of own properties for each\nvehicle type.\n\n### Create the abstract View\n\nFor DRY, we have to create an abstract View overriding some methods:\n\n```javascript\n// Create View Base\nclass VehicleChildView extends View {\n\n    // Override getQueryOptions using props\n    static getQueryOptions(options) {\n        return {\n            model: Vehicle, \n            include: [{\n                model: this.model,\n                required: true,\n            }],\n            where: {\n                type: this.type,\n            },\n            ...(options.viewQueryOptions || {}),\n        };\n    }\n\n    static init(fields, options = {}) {\n\n        const extraFields = Object.keys(fields).reduce((acc, key) => {\n            acc[key] = `${this.type}.${key}`;\n            return acc;\n        }, {});\n\n        const {viewQueryOptions}  = options;\n\n        super.init({\n            name: DataTypes.STRING,\n            price: DataTypes.DECIMAL,\n            ...fields,\n        }, {\n            ...options,\n            viewQueryOptions: {\n                fieldsMap: {\n                    ...extraFields,\n                    ...(viewQueryOptions || {}),\n                },\n                ...(viewQueryOptions && options.viewQueryOptions || {}),\n            }, }); }\n\n    // Override create \n    static async create(data, options = {}) {\n        return sequelize.transaction(async (transaction) => {\n            const {\n                name,\n                price,\n                ...extra\n            } = data;\n\n            const vehicle = await Vehicle.create({\n                type: this.type,\n                name,\n                price,\n            }, { transaction });\n\n            const child = await this.model.create({\n                id: vehicle.id,\n                ...extra,\n            }, { transaction });\n\n            return this.build({\n                ...vehicle.get({plane: true}),\n                ...child.get({plane: true}),\n            });\n        });\n    }\n};\n```\n\nIn this case we are using the method `getQueryOptions` to define the View\nquery, equal for all childrens. We expect two static properties in the\ndefinition of a `VehicleChildView`; `type` and `model`, this properties are\nused for abstract View to create the query options, the relation and to be used\nin the overrided logic of `create` method, in this case we are overriting\n`create` to desmotrate a use of a View like some kind of serializer.\n\nWe are auto-mapping the own-properties too.\n\n## Create the child views\n\nWith the code abstracted bellow, the definition of new Views that represent\na child of `Vehicle`, must to be simple:\n\n```javascript\n// Create Car View\nclass VehicleCar extends VehicleChildView {\n    static type = 'car';\n    static model = Car;\n};\n\nVehicleCar.init({\n    transmission: DataTypes.STRING,\n    doors: DataTypes.INTEGER,\n    style: DataTypes.STRING,\n    hp: DataTypes.INTEGER,\n}, {\n    sequelize,\n});\n\n// Create Bike View\nclass VehicleBike extends VehicleChildView {\n    static type = 'bike';\n    static model = Bike;\n};\n\nVehicleBike.init({\n    style: DataTypes.STRING,\n    cicles: DataTypes.INTEGER,\n    cc: DataTypes.INTEGER,\n}, {\n    sequelize,\n});\n```\n\nOnly extending the class `VehicleChildView` and creating the properties\n`type`and `model`, the rest of the logic runs over the abstract View.\n\n## Usage\n\nThe usage is very simple, we treat the final views like models with the full\ninformation of entitiy (parent and child attributes):\n\n```javascript\n(async () => {\n  await sequelize.sync();\n\n  const car = await VehicleCar.create({\n    name: 'Audi',\n    price: 100000,\n    transmission: 'automatic',\n    doors: 4,\n    style: 'sedan',\n    hp: 200,\n  });\n\n  const bike = await VehicleBike.create({\n    name: 'BMX',\n    price: 10000,\n    style: 'road',\n    cicles: 100,\n    cc: 100,\n  });\n\n  const cars = await VehicleCar.findAll();\n  console.log(cars.map((car) => car.toJSON()));\n\n  const bikes = await VehicleBike.findAll();\n  console.log(bikes.map((bike) => bike.toJSON()));\n})();\n```\n\nThe result should to output:\n\n```javascript\n[\n  {\n    id: 1,\n    name: 'Audi',\n    price: 100000,\n    transmission: 'automatic',\n    doors: 4,\n    style: 'sedan',\n    hp: 200,\n    createdAt: 2022-03-01T03:58:18.941Z,\n    updatedAt: 2022-03-01T03:58:18.941Z\n  }\n]\n[\n  {\n    id: 2,\n    name: 'BMX',\n    price: 10000,\n    style: 'road',\n    cicles: 100,\n    cc: 100,\n    createdAt: 2022-03-01T03:58:18.962Z,\n    updatedAt: 2022-03-01T03:58:18.962Z\n  }\n]\n```\n\n",
    "static": true,
    "access": "public"
  }
]